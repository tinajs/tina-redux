<template>
  <view class="container">
    <view class="title">Todo</view>
    <view class="add">
      <input value="{{ input }}" placeholder="What needs to be done?" type="text" confirm-type="send" bindinput="input" bindconfirm="addTodo" />
    </view>
    <view class="list">
      <view wx:for="{{ filtered }}" wx:for-item="todo" wx:key="id" class="item {{ todo.completed ? 'done' : '' }}" data-id="{{ todo.id }}" bindtap="toggleTodo">
        {{ todo.text }}
      </view>
      <view class="filter">
        <view wx:for="{{ FILTERS }}" wx:key="key" class="option {{ filter === item.key ? 'selected' : '' }}" data-filter="{{ item.key }}" bindtap="tapFilter">
          {{ item.text }}
        </view>
      </view>
    </view>
    <view class="clear" bindtap="clear">Clear completed</view>
  </view>
</template>

<script>
import { Page } from '@tinajs/tina'
import clone from 'clone'

const FILTERS = [
  { key: 'SHOW_ALL', text: 'All' },
  { key: 'SHOW_ACTIVE', text: 'Active' },
  { key: 'SHOW_COMPLETED', text: 'Completed' },
]

Page.define({
  data: {
    FILTERS,
    filter: 'SHOW_ALL',
    todos: [
      { id: 1, text: 'Star Tina.js', completed: false },
      { id: 2, text: 'Star Tina-Redux', completed: true },
      { id: 3, text: 'Build a mini-program with Tina.js', completed: false },
      { id: 4, text: 'Add to Showcase of Tina.js', completed: false },
    ],
    input: '',
  },
  compute ({ filter, todos }) {
    let filtered = []
    switch (filter) {
      case 'SHOW_ALL':
        filtered = todos
        break
      case 'SHOW_ACTIVE':
        filtered = todos.filter((t) => !t.completed)
        break
      case 'SHOW_COMPLETED':
        filtered = todos.filter((t) => t.completed)
        break
    }
    return {
      filtered,
    }
  },
  methods: {
    toggleTodo (event) {
      let { id } = event.currentTarget.dataset
      let todos = clone(this.data.todos)
      let todo = todos.find((t) => t.id === id)
      todo.completed = !todo.completed
      this.setData({
        todos: todos,
      })
    },
    tapFilter (event) {
      let { filter } = event.currentTarget.dataset
      this.setData({
        filter,
      })
    },
    input (e) {
      this.setData({
        input: e.detail.value,
      })
    },
    addTodo (event) {
      let { value } = event.detail
      this.setData({
        todos: clone(this.data.todos).concat({
          id: Date.now(),
          text: value,
          completed: false,
        }),
        input: '',
      })
    },
    clear () {
      this.setData({
        todos: clone(this.data.todos).filter((t) => !t.completed),
      })
    },
  },
})
</script>

<style lang="less">
.container {
  padding: 28px;
  color: #333;
  font-size: 14px;
}
.title {
  font-size: 28px;
  font-weight: bold;
  margin: 1em 0;
}
.add {
  margin: 28px 0;
  input {
    border: 1px solid #ccc;
    padding: 1em;
    border-radius: 4px;
  }
}
.list {
  border: 1px solid #ccc;
  border-radius: 4px;
  overflow: hidden;
  .item {
    padding: 1em;
    line-height: 1.5em;
    border-bottom: 1px solid #ccc;
    background-color: #fbfbfb;
    &:nth-child(2n) {
      background-color: #fefefe;
    }
    &:active {
      background-color: #f2f2f2;
      color: #999;
    }
    &.done {
      color: #ccc;
      text-decoration: line-through;
    }
  }
  .filter {
    padding: 1em 0;
    background-color: #eee;
    color: #333;
    text-align: center;
    .option {
      display: inline-block;
      margin: 0 0.5em;
      padding: 0 0.5em;
      line-height: 1.5em;
      &:last-child {
        border-right: none;
      }
      &.selected {
        border:1px solid #ccc;
        background-color:#fefefe;
      }
    }
  }
}
.clear {
  margin: 14px 0;
  text-decoration: underline;
  text-align: right;
  font-size: 12px;
  color: #666;
}
</style>
